$date
	Thu Jul 29 23:28:11 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module pipeline $end
$scope module ifetch1 $end
$var wire 32 ! EX_MEM_NPC [31:0] $end
$var wire 1 " EX_MEM_PCSrc $end
$var wire 32 # npc_mux [31:0] $end
$var wire 32 $ npc [31:0] $end
$var wire 32 % dataout [31:0] $end
$var wire 32 & PC [31:0] $end
$var wire 32 ' IF_ID_npc [31:0] $end
$var wire 32 ( IF_ID_instr [31:0] $end
$scope module if_id1 $end
$var wire 32 ) npc [31:0] $end
$var wire 32 * instr [31:0] $end
$var reg 32 + instrout [31:0] $end
$var reg 32 , npcout [31:0] $end
$upscope $end
$scope module incrementer1 $end
$var wire 32 - pcout [31:0] $end
$var wire 32 . pcin [31:0] $end
$upscope $end
$scope module memory1 $end
$var wire 32 / addr [31:0] $end
$var reg 32 0 data [31:0] $end
$upscope $end
$scope module mux1 $end
$var wire 32 1 a [31:0] $end
$var wire 32 2 b [31:0] $end
$var wire 1 " sel $end
$var wire 32 3 y [31:0] $end
$upscope $end
$scope module pc_mod1 $end
$var wire 32 4 npc [31:0] $end
$var reg 32 5 PC [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module pipeline $end
$scope module idecode2 $end
$var wire 5 6 MEM_WB_rd [4:0] $end
$var wire 1 7 MEM_WB_regwrite $end
$var wire 32 8 WB_mux5_writedata [31:0] $end
$var wire 2 9 wb_ctlout [1:0] $end
$var wire 32 : signext_out [31:0] $end
$var wire 32 ; s_extendout [31:0] $end
$var wire 1 < regdst $end
$var wire 32 = readdat2 [31:0] $end
$var wire 32 > readdat1 [31:0] $end
$var wire 32 ? rdata2out [31:0] $end
$var wire 32 @ rdata1out [31:0] $end
$var wire 32 A npcout [31:0] $end
$var wire 3 B m_ctlout [2:0] $end
$var wire 5 C instrout_2016 [4:0] $end
$var wire 5 D instrout_1511 [4:0] $end
$var wire 2 E ctlwb_out [1:0] $end
$var wire 3 F ctlm_out [2:0] $end
$var wire 4 G ctlex_out [3:0] $end
$var wire 1 H alusrc $end
$var wire 2 I aluop [1:0] $end
$var wire 32 J IF_ID_npcout [31:0] $end
$var wire 32 K IF_ID_instrout [31:0] $end
$scope module control2 $end
$var wire 6 L opcode [5:0] $end
$var reg 4 M EX [3:0] $end
$var reg 3 N M [2:0] $end
$var reg 2 O WB [1:0] $end
$upscope $end
$scope module id_ex2 $end
$var wire 4 P ctlex_out [3:0] $end
$var wire 3 Q ctlm_out [2:0] $end
$var wire 2 R ctlwb_out [1:0] $end
$var wire 5 S instr_1511 [4:0] $end
$var wire 5 T instr_2016 [4:0] $end
$var wire 32 U signext_out [31:0] $end
$var wire 32 V readdat2 [31:0] $end
$var wire 32 W readdat1 [31:0] $end
$var wire 32 X npc [31:0] $end
$var reg 2 Y aluop [1:0] $end
$var reg 1 H alusrc $end
$var reg 5 Z instrout_1511 [4:0] $end
$var reg 5 [ instrout_2016 [4:0] $end
$var reg 3 \ m_ctlout [2:0] $end
$var reg 32 ] npcout [31:0] $end
$var reg 32 ^ rdata1out [31:0] $end
$var reg 32 _ rdata2out [31:0] $end
$var reg 1 < regdst $end
$var reg 32 ` s_extendout [31:0] $end
$var reg 2 a wb_ctlout [1:0] $end
$upscope $end
$scope module register2 $end
$var wire 5 b rd [4:0] $end
$var wire 1 7 regwrite $end
$var wire 5 c rs [4:0] $end
$var wire 5 d rt [4:0] $end
$var wire 32 e writedata [31:0] $end
$var reg 32 f A [31:0] $end
$var reg 32 g B [31:0] $end
$var integer 32 h i [31:0] $end
$upscope $end
$scope module s_extend2 $end
$var wire 16 i nextend [15:0] $end
$var reg 32 j extend [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module pipeline $end
$scope module iexecute3 $end
$var wire 32 k EX_MEM_NPC [31:0] $end
$var wire 2 l aluop [1:0] $end
$var wire 1 H alusrc $end
$var wire 5 m instrout_1511 [4:0] $end
$var wire 5 n instrout_2016 [4:0] $end
$var wire 3 o m_ctl [2:0] $end
$var wire 32 p npcout [31:0] $end
$var wire 32 q rdata1 [31:0] $end
$var wire 32 r rdata2 [31:0] $end
$var wire 1 < regdst $end
$var wire 32 s s_extendout [31:0] $end
$var wire 2 t wb_ctl [1:0] $end
$var wire 1 u zero $end
$var wire 2 v wb_ctlout [1:0] $end
$var wire 32 w rdata2out [31:0] $end
$var wire 5 x muxout [4:0] $end
$var wire 1 y memwrite $end
$var wire 1 z memread $end
$var wire 5 { five_bit_muxout [4:0] $end
$var wire 3 | control [2:0] $end
$var wire 1 } branch $end
$var wire 32 ~ b [31:0] $end
$var wire 1 !" aluzero $end
$var wire 32 "" aluout [31:0] $end
$var wire 32 #" alu_result [31:0] $end
$var wire 32 $" adder_out [31:0] $end
$var wire 32 %" add_result [31:0] $end
$scope module adder3 $end
$var wire 32 &" add_in1 [31:0] $end
$var wire 32 '" add_in2 [31:0] $end
$var wire 32 (" add_out [31:0] $end
$upscope $end
$scope module alu3 $end
$var wire 32 )" a [31:0] $end
$var wire 1 *" sign_mismatch $end
$var wire 1 !" zero $end
$var wire 3 +" control [2:0] $end
$var wire 32 ," b [31:0] $end
$var reg 32 -" result [31:0] $end
$upscope $end
$scope module alu_control3 $end
$var wire 2 ." aluop [1:0] $end
$var wire 6 /" funct [5:0] $end
$var reg 3 0" select [2:0] $end
$upscope $end
$scope module ex_mem3 $end
$var wire 32 1" adder_out [31:0] $end
$var wire 32 2" aluout [31:0] $end
$var wire 1 !" aluzero $end
$var wire 3 3" ctlm_out [2:0] $end
$var wire 2 4" ctlwb_out [1:0] $end
$var wire 32 5" readdat2 [31:0] $end
$var wire 5 6" muxout [4:0] $end
$var reg 32 7" add_result [31:0] $end
$var reg 32 8" alu_result [31:0] $end
$var reg 1 } branch $end
$var reg 5 9" five_bit_muxout [4:0] $end
$var reg 1 z memread $end
$var reg 1 y memwrite $end
$var reg 32 :" rdata2out [31:0] $end
$var reg 2 ;" wb_ctlout [1:0] $end
$var reg 1 u zero $end
$upscope $end
$scope module five_bit_mux3 $end
$var wire 5 <" a [4:0] $end
$var wire 5 =" b [4:0] $end
$var wire 1 < sel $end
$var wire 5 >" y [4:0] $end
$upscope $end
$scope module mux3 $end
$var wire 32 ?" a [31:0] $end
$var wire 32 @" b [31:0] $end
$var wire 1 H sel $end
$var wire 32 A" y [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
bz 1"
b10 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b10 +"
1*"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
1!"
b0 ~
0}
b10 |
b0 {
0z
0y
b0 x
b0 w
b0 v
0u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
bz k
b0 j
b0 i
b1001 h
b0 g
b0 f
bz e
b0 d
b0 c
bz b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b10 R
b0 Q
b1100 P
b10 O
b0 N
b1100 M
b0 L
b0 K
b0 J
b0 I
0H
b1100 G
b0 F
b10 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
0<
b0 ;
b0 :
b0 9
bz 8
z7
bz 6
b0 5
b1 4
b1 3
b1 2
b0 1
b1000110000000010101010 0
b0 /
b0 .
b1 -
b0 ,
b0 +
b1000110000000010101010 *
b1 )
b0 (
b0 '
b0 &
b1000110000000010101010 %
b1 $
b1 #
0"
b0 !
$end
#1
x!"
bx ""
bx -"
bx 2"
b10101010 :
b10101010 U
b10101010 j
b10000011001010100001100100001 %
b10000011001010100001100100001 *
b10000011001010100001100100001 0
b11 |
b11 +"
b11 0"
b10 #
b10 3
b10 4
b11 T
b10101010 i
b11 d
b1 c
b10 $
b10 )
b10 -
b10 2
b1 &
b1 .
b1 /
b1 5
b10 I
b10 Y
b10 l
b10 ."
1<
b10 9
b10 a
b10 t
b10 4"
b1 '
b1 ,
b1 J
b1 X
b1000110000000010101010 (
b1000110000000010101010 +
b1000110000000010101010 K
1u
bz %"
bz 7"
#2
0!"
b1 ""
b1 -"
b1 2"
b100001100100001 :
b100001100100001 U
b100001100100001 j
b0z E
b0z O
b0z R
b100 F
b100 N
b100 Q
bz010 G
bz010 M
bz010 P
b111 |
b111 +"
b111 0"
b100000000000000100010 %
b100000000000000100010 *
b100000000000000100010 0
b11 #
b11 3
b11 4
b1000 S
b101 T
b100001100100001 i
b101 d
b11 c
b100 L
b11 x
b11 6"
b11 >"
b101010 /"
b11 $
b11 )
b11 -
b11 2
b10 &
b10 .
b10 /
b10 5
b10 '
b10 ,
b10 J
b10 X
b10000011001010100001100100001 (
b10000011001010100001100100001 +
b10000011001010100001100100001 K
bx #"
bx 8"
xu
b10 v
b10 ;"
b11 C
b11 [
b11 n
b11 <"
b10101010 ;
b10101010 `
b10101010 s
b10101010 '"
b10101010 ?"
b10101011 $"
b10101011 ("
b1 A
b1 ]
b1 p
b1 &"
#3
1!"
b0 ""
b0 -"
b0 2"
b100010 :
b100010 U
b100010 j
b10 E
b10 O
b10 R
b0 F
b0 N
b0 Q
b1100 G
b1100 M
b1100 P
b10001100000100100011010001010110 %
b10001100000100100011010001010110 *
b10001100000100100011010001010110 0
b110 |
b110 +"
b110 0"
b100 #
b100 3
b100 4
b0 S
b10000 T
b100010 i
b10000 d
b0 c
b0 L
b100001 /"
b0xx0x x
b0xx0x 6"
b0xx0x >"
b100 $
b100 )
b100 -
b100 2
b11 &
b11 .
b11 /
b11 5
b11 {
b11 9"
b1 #"
b1 8"
0u
b11 '
b11 ,
b11 J
b11 X
b100000000000000100010 (
b100000000000000100010 +
b100000000000000100010 K
b1000 D
b1000 Z
b1000 m
b1000 ="
b101 C
b101 [
b101 n
b101 <"
b100001100100001 ;
b100001100100001 `
b100001100100001 s
b100001100100001 '"
b100001100100001 ?"
b100001100100011 $"
b100001100100011 ("
b10 A
b10 ]
b10 p
b10 &"
b1 I
b1 Y
b1 l
b1 ."
z<
b100 B
b100 \
b100 o
b100 3"
b0z 9
b0z a
b0z t
b0z 4"
#4
b11010001010110 :
b11010001010110 U
b11010001010110 j
b11 E
b11 O
b11 R
b10 F
b10 N
b10 Q
b1 G
b1 M
b1 P
b10001111000100100011010001010110 %
b10001111000100100011010001010110 *
b10001111000100100011010001010110 0
b110 |
b110 +"
b110 0"
b101 #
b101 3
b101 4
b110 S
b10010 T
b11010001010110 i
b10010 d
b100011 L
b100010 /"
b10000 x
b10000 6"
b10000 >"
b101 $
b101 )
b101 -
b101 2
b100 &
b100 .
b100 /
b100 5
b100 '
b100 ,
b100 J
b100 X
b10001100000100100011010001010110 (
b10001100000100100011010001010110 +
b10001100000100100011010001010110 K
b0 D
b0 Z
b0 m
b0 ="
b10000 C
b10000 [
b10000 n
b10000 <"
b100010 ;
b100010 `
b100010 s
b100010 '"
b100010 ?"
b100101 $"
b100101 ("
b11 A
b11 ]
b11 p
b11 &"
b10 I
b10 Y
b10 l
b10 ."
1<
b0 B
b0 \
b0 o
b0 3"
b10 9
b10 a
b10 t
b10 4"
b0xx0x {
b0xx0x 9"
b0 #"
b0 8"
1u
1}
b0z v
b0z ;"
#5
b10101101011001010100001100100001 %
b10101101011001010100001100100001 *
b10101101011001010100001100100001 0
b10 |
b10 +"
b10 0"
0!"
b11010001010110 ""
b11010001010110 -"
b11010001010110 2"
b110 #
b110 3
b110 4
b11000 c
b10110 /"
b11010001010110 ~
b11010001010110 ,"
b11010001010110 A"
b110 x
b110 6"
b110 >"
b110 $
b110 )
b110 -
b110 2
b101 &
b101 .
b101 /
b101 5
b101 '
b101 ,
b101 J
b101 X
b10001111000100100011010001010110 (
b10001111000100100011010001010110 +
b10001111000100100011010001010110 K
b110 D
b110 Z
b110 m
b110 ="
b10010 C
b10010 [
b10010 n
b10010 <"
b11010001010110 ;
b11010001010110 `
b11010001010110 s
b11010001010110 '"
b11010001010110 ?"
b11010001011010 $"
b11010001011010 ("
b100 A
b100 ]
b100 p
b100 &"
1H
b0 I
b0 Y
b0 l
b0 ."
0<
b10 B
b10 \
b10 o
b10 3"
b11 9
b11 a
b11 t
b11 4"
b10000 {
b10000 9"
0}
b10 v
b10 ;"
#6
b100001100100001 :
b100001100100001 U
b100001100100001 j
b0z E
b0z O
b0z R
b1 F
b1 N
b1 Q
bz001 G
bz001 M
bz001 P
b10011000000010010001101000101 %
b10011000000010010001101000101 *
b10011000000010010001101000101 0
b111 #
b111 3
b111 4
b1000 S
b101 T
b100001100100001 i
b101 d
b1011 c
b101011 L
b111 $
b111 )
b111 -
b111 2
b110 &
b110 .
b110 /
b110 5
b110 '
b110 ,
b110 J
b110 X
b10101101011001010100001100100001 (
b10101101011001010100001100100001 +
b10101101011001010100001100100001 K
b11010001011011 $"
b11010001011011 ("
b101 A
b101 ]
b101 p
b101 &"
b110 {
b110 9"
b11010001010110 #"
b11010001010110 8"
0u
b11 v
b11 ;"
#7
b10001101000101 :
b10001101000101 U
b10001101000101 j
b100 F
b100 N
b100 Q
bz010 G
bz010 M
bz010 P
b10101100011001010100001100100001 %
b10101100011001010100001100100001 *
b10101100011001010100001100100001 0
b100001100100001 ""
b100001100100001 -"
b100001100100001 2"
b1000 #
b1000 3
b1000 4
b100 S
b1 T
b10001101000101 i
b1 d
b11000 c
b100 L
b100001 /"
b100001100100001 ~
b100001100100001 ,"
b100001100100001 A"
b0xx0x x
b0xx0x 6"
b0xx0x >"
b1000 $
b1000 )
b1000 -
b1000 2
b111 &
b111 .
b111 /
b111 5
b111 '
b111 ,
b111 J
b111 X
b10011000000010010001101000101 (
b10011000000010010001101000101 +
b10011000000010010001101000101 K
b1000 D
b1000 Z
b1000 m
b1000 ="
b101 C
b101 [
b101 n
b101 <"
b100001100100001 ;
b100001100100001 `
b100001100100001 s
b100001100100001 '"
b100001100100001 ?"
b100001100100111 $"
b100001100100111 ("
b110 A
b110 ]
b110 p
b110 &"
z<
b1 B
b1 \
b1 o
b1 3"
b0z 9
b0z a
b0z t
b0z 4"
#8
b100001100100001 :
b100001100100001 U
b100001100100001 j
b1 F
b1 N
b1 Q
bz001 G
bz001 M
bz001 P
b10010000000010010001101000101 %
b10010000000010010001101000101 *
b10010000000010010001101000101 0
b110 |
b110 +"
b110 0"
1!"
b0 ""
b0 -"
b0 2"
b1001 #
b1001 3
b1001 4
b1000 S
b101 T
b100001100100001 i
b101 d
b11 c
b101011 L
b0x0x x
b0x0x 6"
b0x0x >"
b101 /"
b0 ~
b0 ,"
b0 A"
b1001 $
b1001 )
b1001 -
b1001 2
b1000 &
b1000 .
b1000 /
b1000 5
b1000 '
b1000 ,
b1000 J
b1000 X
b10101100011001010100001100100001 (
b10101100011001010100001100100001 +
b10101100011001010100001100100001 K
b100 D
b100 Z
b100 m
b100 ="
b1 C
b1 [
b1 n
b1 <"
b10001101000101 ;
b10001101000101 `
b10001101000101 s
b10001101000101 '"
b10001101000101 ?"
b10001101001100 $"
b10001101001100 ("
b111 A
b111 ]
b111 p
b111 &"
0H
b1 I
b1 Y
b1 l
b1 ."
b100 B
b100 \
b100 o
b100 3"
b0xx0x {
b0xx0x 9"
b100001100100001 #"
b100001100100001 8"
b0z v
b0z ;"
#9
b10001101000101 :
b10001101000101 U
b10001101000101 j
b100 F
b100 N
b100 Q
bz010 G
bz010 M
bz010 P
bx %
bx *
bx 0
b10 |
b10 +"
b10 0"
0!"
b100001100100001 ""
b100001100100001 -"
b100001100100001 2"
b1010 #
b1010 3
b1010 4
b100 S
b1 T
b10001101000101 i
b1 d
b10000 c
b100 L
b0xx0x x
b0xx0x 6"
b0xx0x >"
b100001 /"
b100001100100001 ~
b100001100100001 ,"
b100001100100001 A"
b1010 $
b1010 )
b1010 -
b1010 2
b1001 &
b1001 .
b1001 /
b1001 5
b1001 '
b1001 ,
b1001 J
b1001 X
b10010000000010010001101000101 (
b10010000000010010001101000101 +
b10010000000010010001101000101 K
b1000 D
b1000 Z
b1000 m
b1000 ="
b101 C
b101 [
b101 n
b101 <"
b100001100100001 ;
b100001100100001 `
b100001100100001 s
b100001100100001 '"
b100001100100001 ?"
b100001100101001 $"
b100001100101001 ("
b1000 A
b1000 ]
b1000 p
b1000 &"
1H
b0 I
b0 Y
b0 l
b0 ."
b1 B
b1 \
b1 o
b1 3"
b0x0x {
b0x0x 9"
b0 #"
b0 8"
1u
1}
#10
bx :
bx U
bx j
bx =
bx V
bx g
bx >
bx W
bx f
b110 |
b110 +"
b110 0"
1!"
b0 ""
b0 -"
b0 2"
b1011 #
b1011 3
b1011 4
bx S
bx T
bx i
bx d
bx c
bx L
b0x0x x
b0x0x 6"
b0x0x >"
b101 /"
b0 ~
b0 ,"
b0 A"
b1011 $
b1011 )
b1011 -
b1011 2
b1010 &
b1010 .
b1010 /
b1010 5
b1010 '
b1010 ,
b1010 J
b1010 X
bx (
bx +
bx K
b100 D
b100 Z
b100 m
b100 ="
b1 C
b1 [
b1 n
b1 <"
b10001101000101 ;
b10001101000101 `
b10001101000101 s
b10001101000101 '"
b10001101000101 ?"
b10001101001110 $"
b10001101001110 ("
b1001 A
b1001 ]
b1001 p
b1001 &"
0H
b1 I
b1 Y
b1 l
b1 ."
b100 B
b100 \
b100 o
b100 3"
b0xx0x {
b0xx0x 9"
b100001100100001 #"
b100001100100001 8"
0u
0}
#11
x!"
b1100 #
b1100 3
b1100 4
bx x
bx 6"
bx >"
bx /"
bx ~
bx ,"
bx A"
bx ""
bx -"
bx 2"
b1100 $
b1100 )
b1100 -
b1100 2
b1011 &
b1011 .
b1011 /
b1011 5
b1011 '
b1011 ,
b1011 J
b1011 X
bx D
bx Z
bx m
bx ="
bx C
bx [
bx n
bx <"
bx ;
bx `
bx s
bx '"
bx ?"
bx ?
bx _
bx r
bx 5"
bx @"
bx @
bx ^
bx q
bx )"
bx $"
bx ("
b1010 A
b1010 ]
b1010 p
b1010 &"
b0x0x {
b0x0x 9"
b0 #"
b0 8"
1u
1}
#12
b1101 #
b1101 3
b1101 4
b1101 $
b1101 )
b1101 -
b1101 2
b1100 &
b1100 .
b1100 /
b1100 5
b1100 '
b1100 ,
b1100 J
b1100 X
b1011 A
b1011 ]
b1011 p
b1011 &"
bx {
bx 9"
bx w
bx :"
bx #"
bx 8"
xu
#13
b1110 #
b1110 3
b1110 4
b1110 $
b1110 )
b1110 -
b1110 2
b1101 &
b1101 .
b1101 /
b1101 5
b1101 '
b1101 ,
b1101 J
b1101 X
b1100 A
b1100 ]
b1100 p
b1100 &"
#14
b1111 #
b1111 3
b1111 4
b1111 $
b1111 )
b1111 -
b1111 2
b1110 &
b1110 .
b1110 /
b1110 5
b1110 '
b1110 ,
b1110 J
b1110 X
b1101 A
b1101 ]
b1101 p
b1101 &"
#15
b10000 #
b10000 3
b10000 4
b10000 $
b10000 )
b10000 -
b10000 2
b1111 &
b1111 .
b1111 /
b1111 5
b1111 '
b1111 ,
b1111 J
b1111 X
b1110 A
b1110 ]
b1110 p
b1110 &"
#16
b10001 #
b10001 3
b10001 4
b10001 $
b10001 )
b10001 -
b10001 2
b10000 &
b10000 .
b10000 /
b10000 5
b10000 '
b10000 ,
b10000 J
b10000 X
b1111 A
b1111 ]
b1111 p
b1111 &"
#17
b10010 #
b10010 3
b10010 4
b10010 $
b10010 )
b10010 -
b10010 2
b10001 &
b10001 .
b10001 /
b10001 5
b10001 '
b10001 ,
b10001 J
b10001 X
b10000 A
b10000 ]
b10000 p
b10000 &"
#18
b10011 #
b10011 3
b10011 4
b10011 $
b10011 )
b10011 -
b10011 2
b10010 &
b10010 .
b10010 /
b10010 5
b10010 '
b10010 ,
b10010 J
b10010 X
b10001 A
b10001 ]
b10001 p
b10001 &"
#19
b10100 #
b10100 3
b10100 4
b10100 $
b10100 )
b10100 -
b10100 2
b10011 &
b10011 .
b10011 /
b10011 5
b10011 '
b10011 ,
b10011 J
b10011 X
b10010 A
b10010 ]
b10010 p
b10010 &"
#20
b10101 #
b10101 3
b10101 4
b10101 $
b10101 )
b10101 -
b10101 2
b10100 &
b10100 .
b10100 /
b10100 5
b10100 '
b10100 ,
b10100 J
b10100 X
b10011 A
b10011 ]
b10011 p
b10011 &"
